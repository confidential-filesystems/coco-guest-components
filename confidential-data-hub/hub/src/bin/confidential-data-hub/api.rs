// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.UnsealSecretInput)
pub struct UnsealSecretInput {
    // message fields
    // @@protoc_insertion_point(field:api.UnsealSecretInput.secret)
    pub secret: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:api.UnsealSecretInput.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnsealSecretInput {
    fn default() -> &'a UnsealSecretInput {
        <UnsealSecretInput as ::protobuf::Message>::default_instance()
    }
}

impl UnsealSecretInput {
    pub fn new() -> UnsealSecretInput {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "secret",
            |m: &UnsealSecretInput| { &m.secret },
            |m: &mut UnsealSecretInput| { &mut m.secret },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnsealSecretInput>(
            "UnsealSecretInput",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnsealSecretInput {
    const NAME: &'static str = "UnsealSecretInput";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.secret = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.secret.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.secret);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.secret.is_empty() {
            os.write_bytes(1, &self.secret)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnsealSecretInput {
        UnsealSecretInput::new()
    }

    fn clear(&mut self) {
        self.secret.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnsealSecretInput {
        static instance: UnsealSecretInput = UnsealSecretInput {
            secret: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnsealSecretInput {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnsealSecretInput").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnsealSecretInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnsealSecretInput {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.UnsealSecretOutput)
pub struct UnsealSecretOutput {
    // message fields
    // @@protoc_insertion_point(field:api.UnsealSecretOutput.plaintext)
    pub plaintext: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:api.UnsealSecretOutput.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnsealSecretOutput {
    fn default() -> &'a UnsealSecretOutput {
        <UnsealSecretOutput as ::protobuf::Message>::default_instance()
    }
}

impl UnsealSecretOutput {
    pub fn new() -> UnsealSecretOutput {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "plaintext",
            |m: &UnsealSecretOutput| { &m.plaintext },
            |m: &mut UnsealSecretOutput| { &mut m.plaintext },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnsealSecretOutput>(
            "UnsealSecretOutput",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnsealSecretOutput {
    const NAME: &'static str = "UnsealSecretOutput";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.plaintext = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.plaintext.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.plaintext);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.plaintext.is_empty() {
            os.write_bytes(1, &self.plaintext)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnsealSecretOutput {
        UnsealSecretOutput::new()
    }

    fn clear(&mut self) {
        self.plaintext.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnsealSecretOutput {
        static instance: UnsealSecretOutput = UnsealSecretOutput {
            plaintext: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnsealSecretOutput {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnsealSecretOutput").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnsealSecretOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnsealSecretOutput {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.ExtraCredential)
pub struct ExtraCredential {
    // message fields
    // @@protoc_insertion_point(field:api.ExtraCredential.ControllerCrpToken)
    pub ControllerCrpToken: ::std::string::String,
    // @@protoc_insertion_point(field:api.ExtraCredential.ControllerAttestationReport)
    pub ControllerAttestationReport: ::std::string::String,
    // @@protoc_insertion_point(field:api.ExtraCredential.ControllerCertChain)
    pub ControllerCertChain: ::std::string::String,
    // @@protoc_insertion_point(field:api.ExtraCredential.AAAttester)
    pub AAAttester: ::std::string::String,
    // @@protoc_insertion_point(field:api.ExtraCredential.ContainerName)
    pub ContainerName: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:api.ExtraCredential.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExtraCredential {
    fn default() -> &'a ExtraCredential {
        <ExtraCredential as ::protobuf::Message>::default_instance()
    }
}

impl ExtraCredential {
    pub fn new() -> ExtraCredential {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ControllerCrpToken",
            |m: &ExtraCredential| { &m.ControllerCrpToken },
            |m: &mut ExtraCredential| { &mut m.ControllerCrpToken },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ControllerAttestationReport",
            |m: &ExtraCredential| { &m.ControllerAttestationReport },
            |m: &mut ExtraCredential| { &mut m.ControllerAttestationReport },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ControllerCertChain",
            |m: &ExtraCredential| { &m.ControllerCertChain },
            |m: &mut ExtraCredential| { &mut m.ControllerCertChain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AAAttester",
            |m: &ExtraCredential| { &m.AAAttester },
            |m: &mut ExtraCredential| { &mut m.AAAttester },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ContainerName",
            |m: &ExtraCredential| { &m.ContainerName },
            |m: &mut ExtraCredential| { &mut m.ContainerName },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExtraCredential>(
            "ExtraCredential",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExtraCredential {
    const NAME: &'static str = "ExtraCredential";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ControllerCrpToken = is.read_string()?;
                },
                18 => {
                    self.ControllerAttestationReport = is.read_string()?;
                },
                26 => {
                    self.ControllerCertChain = is.read_string()?;
                },
                34 => {
                    self.AAAttester = is.read_string()?;
                },
                42 => {
                    self.ContainerName = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.ControllerCrpToken.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ControllerCrpToken);
        }
        if !self.ControllerAttestationReport.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ControllerAttestationReport);
        }
        if !self.ControllerCertChain.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ControllerCertChain);
        }
        if !self.AAAttester.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.AAAttester);
        }
        if !self.ContainerName.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.ContainerName);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.ControllerCrpToken.is_empty() {
            os.write_string(1, &self.ControllerCrpToken)?;
        }
        if !self.ControllerAttestationReport.is_empty() {
            os.write_string(2, &self.ControllerAttestationReport)?;
        }
        if !self.ControllerCertChain.is_empty() {
            os.write_string(3, &self.ControllerCertChain)?;
        }
        if !self.AAAttester.is_empty() {
            os.write_string(4, &self.AAAttester)?;
        }
        if !self.ContainerName.is_empty() {
            os.write_string(5, &self.ContainerName)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExtraCredential {
        ExtraCredential::new()
    }

    fn clear(&mut self) {
        self.ControllerCrpToken.clear();
        self.ControllerAttestationReport.clear();
        self.ControllerCertChain.clear();
        self.AAAttester.clear();
        self.ContainerName.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExtraCredential {
        static instance: ExtraCredential = ExtraCredential {
            ControllerCrpToken: ::std::string::String::new(),
            ControllerAttestationReport: ::std::string::String::new(),
            ControllerCertChain: ::std::string::String::new(),
            AAAttester: ::std::string::String::new(),
            ContainerName: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExtraCredential {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExtraCredential").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExtraCredential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtraCredential {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.GetResourceRequest)
pub struct GetResourceRequest {
    // message fields
    // @@protoc_insertion_point(field:api.GetResourceRequest.ResourcePath)
    pub ResourcePath: ::std::string::String,
    // @@protoc_insertion_point(field:api.GetResourceRequest.ExtraCredential)
    pub ExtraCredential: ::protobuf::MessageField<ExtraCredential>,
    // special fields
    // @@protoc_insertion_point(special_field:api.GetResourceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetResourceRequest {
    fn default() -> &'a GetResourceRequest {
        <GetResourceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetResourceRequest {
    pub fn new() -> GetResourceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ResourcePath",
            |m: &GetResourceRequest| { &m.ResourcePath },
            |m: &mut GetResourceRequest| { &mut m.ResourcePath },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ExtraCredential>(
            "ExtraCredential",
            |m: &GetResourceRequest| { &m.ExtraCredential },
            |m: &mut GetResourceRequest| { &mut m.ExtraCredential },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetResourceRequest>(
            "GetResourceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetResourceRequest {
    const NAME: &'static str = "GetResourceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ResourcePath = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ExtraCredential)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.ResourcePath.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ResourcePath);
        }
        if let Some(v) = self.ExtraCredential.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.ResourcePath.is_empty() {
            os.write_string(1, &self.ResourcePath)?;
        }
        if let Some(v) = self.ExtraCredential.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetResourceRequest {
        GetResourceRequest::new()
    }

    fn clear(&mut self) {
        self.ResourcePath.clear();
        self.ExtraCredential.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetResourceRequest {
        static instance: GetResourceRequest = GetResourceRequest {
            ResourcePath: ::std::string::String::new(),
            ExtraCredential: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetResourceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetResourceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResourceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.GetResourceResponse)
pub struct GetResourceResponse {
    // message fields
    // @@protoc_insertion_point(field:api.GetResourceResponse.Resource)
    pub Resource: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:api.GetResourceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetResourceResponse {
    fn default() -> &'a GetResourceResponse {
        <GetResourceResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetResourceResponse {
    pub fn new() -> GetResourceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Resource",
            |m: &GetResourceResponse| { &m.Resource },
            |m: &mut GetResourceResponse| { &mut m.Resource },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetResourceResponse>(
            "GetResourceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetResourceResponse {
    const NAME: &'static str = "GetResourceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Resource = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Resource.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.Resource);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Resource.is_empty() {
            os.write_bytes(1, &self.Resource)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetResourceResponse {
        GetResourceResponse::new()
    }

    fn clear(&mut self) {
        self.Resource.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetResourceResponse {
        static instance: GetResourceResponse = GetResourceResponse {
            Resource: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetResourceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetResourceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetResourceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResourceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.SetResourceRequest)
pub struct SetResourceRequest {
    // message fields
    // @@protoc_insertion_point(field:api.SetResourceRequest.ResourcePath)
    pub ResourcePath: ::std::string::String,
    // @@protoc_insertion_point(field:api.SetResourceRequest.Resource)
    pub Resource: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:api.SetResourceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SetResourceRequest {
    fn default() -> &'a SetResourceRequest {
        <SetResourceRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetResourceRequest {
    pub fn new() -> SetResourceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ResourcePath",
            |m: &SetResourceRequest| { &m.ResourcePath },
            |m: &mut SetResourceRequest| { &mut m.ResourcePath },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Resource",
            |m: &SetResourceRequest| { &m.Resource },
            |m: &mut SetResourceRequest| { &mut m.Resource },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SetResourceRequest>(
            "SetResourceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SetResourceRequest {
    const NAME: &'static str = "SetResourceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ResourcePath = is.read_string()?;
                },
                18 => {
                    self.Resource = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.ResourcePath.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ResourcePath);
        }
        if !self.Resource.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.Resource);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.ResourcePath.is_empty() {
            os.write_string(1, &self.ResourcePath)?;
        }
        if !self.Resource.is_empty() {
            os.write_bytes(2, &self.Resource)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SetResourceRequest {
        SetResourceRequest::new()
    }

    fn clear(&mut self) {
        self.ResourcePath.clear();
        self.Resource.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SetResourceRequest {
        static instance: SetResourceRequest = SetResourceRequest {
            ResourcePath: ::std::string::String::new(),
            Resource: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SetResourceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SetResourceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SetResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetResourceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:api.SetResourceResponse)
pub struct SetResourceResponse {
    // message fields
    // @@protoc_insertion_point(field:api.SetResourceResponse.Response)
    pub Response: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:api.SetResourceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SetResourceResponse {
    fn default() -> &'a SetResourceResponse {
        <SetResourceResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetResourceResponse {
    pub fn new() -> SetResourceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Response",
            |m: &SetResourceResponse| { &m.Response },
            |m: &mut SetResourceResponse| { &mut m.Response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SetResourceResponse>(
            "SetResourceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SetResourceResponse {
    const NAME: &'static str = "SetResourceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Response = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Response.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.Response);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Response.is_empty() {
            os.write_bytes(1, &self.Response)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SetResourceResponse {
        SetResourceResponse::new()
    }

    fn clear(&mut self) {
        self.Response.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SetResourceResponse {
        static instance: SetResourceResponse = SetResourceResponse {
            Response: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SetResourceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SetResourceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SetResourceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetResourceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tapi.proto\x12\x03api\"+\n\x11UnsealSecretInput\x12\x16\n\x06secret\
    \x18\x01\x20\x01(\x0cR\x06secret\"2\n\x12UnsealSecretOutput\x12\x1c\n\tp\
    laintext\x18\x01\x20\x01(\x0cR\tplaintext\"\xfb\x01\n\x0fExtraCredential\
    \x12.\n\x12ControllerCrpToken\x18\x01\x20\x01(\tR\x12ControllerCrpToken\
    \x12@\n\x1bControllerAttestationReport\x18\x02\x20\x01(\tR\x1bController\
    AttestationReport\x120\n\x13ControllerCertChain\x18\x03\x20\x01(\tR\x13C\
    ontrollerCertChain\x12\x1e\n\nAAAttester\x18\x04\x20\x01(\tR\nAAAttester\
    \x12$\n\rContainerName\x18\x05\x20\x01(\tR\rContainerName\"x\n\x12GetRes\
    ourceRequest\x12\"\n\x0cResourcePath\x18\x01\x20\x01(\tR\x0cResourcePath\
    \x12>\n\x0fExtraCredential\x18\x02\x20\x01(\x0b2\x14.api.ExtraCredential\
    R\x0fExtraCredential\"1\n\x13GetResourceResponse\x12\x1a\n\x08Resource\
    \x18\x01\x20\x01(\x0cR\x08Resource\"T\n\x12SetResourceRequest\x12\"\n\
    \x0cResourcePath\x18\x01\x20\x01(\tR\x0cResourcePath\x12\x1a\n\x08Resour\
    ce\x18\x02\x20\x01(\x0cR\x08Resource\"1\n\x13SetResourceResponse\x12\x1a\
    \n\x08Response\x18\x01\x20\x01(\x0cR\x08Response2V\n\x13SealedSecretServ\
    ice\x12?\n\x0cUnsealSecret\x12\x16.api.UnsealSecretInput\x1a\x17.api.Uns\
    ealSecretOutput2\x95\x01\n\x0fResourceService\x12@\n\x0bGetResource\x12\
    \x17.api.GetResourceRequest\x1a\x18.api.GetResourceResponse\x12@\n\x0bSe\
    tResource\x12\x17.api.SetResourceRequest\x1a\x18.api.SetResourceResponse\
    b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(UnsealSecretInput::generated_message_descriptor_data());
            messages.push(UnsealSecretOutput::generated_message_descriptor_data());
            messages.push(ExtraCredential::generated_message_descriptor_data());
            messages.push(GetResourceRequest::generated_message_descriptor_data());
            messages.push(GetResourceResponse::generated_message_descriptor_data());
            messages.push(SetResourceRequest::generated_message_descriptor_data());
            messages.push(SetResourceResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
