// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `attestation_agent.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:attestation_agent.ExtraCredential)
pub struct ExtraCredential {
    // message fields
    // @@protoc_insertion_point(field:attestation_agent.ExtraCredential.ControllerCrpToken)
    pub ControllerCrpToken: ::std::string::String,
    // @@protoc_insertion_point(field:attestation_agent.ExtraCredential.ControllerAttestationReport)
    pub ControllerAttestationReport: ::std::string::String,
    // @@protoc_insertion_point(field:attestation_agent.ExtraCredential.ControllerCertChain)
    pub ControllerCertChain: ::std::string::String,
    // @@protoc_insertion_point(field:attestation_agent.ExtraCredential.AAAttester)
    pub AAAttester: ::std::string::String,
    // @@protoc_insertion_point(field:attestation_agent.ExtraCredential.ContainerName)
    pub ContainerName: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.ExtraCredential.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExtraCredential {
    fn default() -> &'a ExtraCredential {
        <ExtraCredential as ::protobuf::Message>::default_instance()
    }
}

impl ExtraCredential {
    pub fn new() -> ExtraCredential {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ControllerCrpToken",
            |m: &ExtraCredential| { &m.ControllerCrpToken },
            |m: &mut ExtraCredential| { &mut m.ControllerCrpToken },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ControllerAttestationReport",
            |m: &ExtraCredential| { &m.ControllerAttestationReport },
            |m: &mut ExtraCredential| { &mut m.ControllerAttestationReport },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ControllerCertChain",
            |m: &ExtraCredential| { &m.ControllerCertChain },
            |m: &mut ExtraCredential| { &mut m.ControllerCertChain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AAAttester",
            |m: &ExtraCredential| { &m.AAAttester },
            |m: &mut ExtraCredential| { &mut m.AAAttester },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ContainerName",
            |m: &ExtraCredential| { &m.ContainerName },
            |m: &mut ExtraCredential| { &mut m.ContainerName },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExtraCredential>(
            "ExtraCredential",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExtraCredential {
    const NAME: &'static str = "ExtraCredential";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ControllerCrpToken = is.read_string()?;
                },
                18 => {
                    self.ControllerAttestationReport = is.read_string()?;
                },
                26 => {
                    self.ControllerCertChain = is.read_string()?;
                },
                34 => {
                    self.AAAttester = is.read_string()?;
                },
                42 => {
                    self.ContainerName = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.ControllerCrpToken.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ControllerCrpToken);
        }
        if !self.ControllerAttestationReport.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ControllerAttestationReport);
        }
        if !self.ControllerCertChain.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ControllerCertChain);
        }
        if !self.AAAttester.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.AAAttester);
        }
        if !self.ContainerName.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.ContainerName);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.ControllerCrpToken.is_empty() {
            os.write_string(1, &self.ControllerCrpToken)?;
        }
        if !self.ControllerAttestationReport.is_empty() {
            os.write_string(2, &self.ControllerAttestationReport)?;
        }
        if !self.ControllerCertChain.is_empty() {
            os.write_string(3, &self.ControllerCertChain)?;
        }
        if !self.AAAttester.is_empty() {
            os.write_string(4, &self.AAAttester)?;
        }
        if !self.ContainerName.is_empty() {
            os.write_string(5, &self.ContainerName)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExtraCredential {
        ExtraCredential::new()
    }

    fn clear(&mut self) {
        self.ControllerCrpToken.clear();
        self.ControllerAttestationReport.clear();
        self.ControllerCertChain.clear();
        self.AAAttester.clear();
        self.ContainerName.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExtraCredential {
        static instance: ExtraCredential = ExtraCredential {
            ControllerCrpToken: ::std::string::String::new(),
            ControllerAttestationReport: ::std::string::String::new(),
            ControllerCertChain: ::std::string::String::new(),
            AAAttester: ::std::string::String::new(),
            ContainerName: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExtraCredential {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExtraCredential").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExtraCredential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtraCredential {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:attestation_agent.GetEvidenceRequest)
pub struct GetEvidenceRequest {
    // message fields
    // @@protoc_insertion_point(field:attestation_agent.GetEvidenceRequest.RuntimeData)
    pub RuntimeData: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:attestation_agent.GetEvidenceRequest.ExtraCredential)
    pub ExtraCredential: ::protobuf::MessageField<ExtraCredential>,
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.GetEvidenceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetEvidenceRequest {
    fn default() -> &'a GetEvidenceRequest {
        <GetEvidenceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetEvidenceRequest {
    pub fn new() -> GetEvidenceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "RuntimeData",
            |m: &GetEvidenceRequest| { &m.RuntimeData },
            |m: &mut GetEvidenceRequest| { &mut m.RuntimeData },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ExtraCredential>(
            "ExtraCredential",
            |m: &GetEvidenceRequest| { &m.ExtraCredential },
            |m: &mut GetEvidenceRequest| { &mut m.ExtraCredential },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetEvidenceRequest>(
            "GetEvidenceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetEvidenceRequest {
    const NAME: &'static str = "GetEvidenceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.RuntimeData = is.read_bytes()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ExtraCredential)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.RuntimeData.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.RuntimeData);
        }
        if let Some(v) = self.ExtraCredential.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.RuntimeData.is_empty() {
            os.write_bytes(1, &self.RuntimeData)?;
        }
        if let Some(v) = self.ExtraCredential.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetEvidenceRequest {
        GetEvidenceRequest::new()
    }

    fn clear(&mut self) {
        self.RuntimeData.clear();
        self.ExtraCredential.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetEvidenceRequest {
        static instance: GetEvidenceRequest = GetEvidenceRequest {
            RuntimeData: ::std::vec::Vec::new(),
            ExtraCredential: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetEvidenceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetEvidenceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetEvidenceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetEvidenceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:attestation_agent.GetEvidenceResponse)
pub struct GetEvidenceResponse {
    // message fields
    // @@protoc_insertion_point(field:attestation_agent.GetEvidenceResponse.Tee)
    pub Tee: ::protobuf::EnumOrUnknown<TeeType>,
    // @@protoc_insertion_point(field:attestation_agent.GetEvidenceResponse.Evidence)
    pub Evidence: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.GetEvidenceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetEvidenceResponse {
    fn default() -> &'a GetEvidenceResponse {
        <GetEvidenceResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetEvidenceResponse {
    pub fn new() -> GetEvidenceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Tee",
            |m: &GetEvidenceResponse| { &m.Tee },
            |m: &mut GetEvidenceResponse| { &mut m.Tee },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Evidence",
            |m: &GetEvidenceResponse| { &m.Evidence },
            |m: &mut GetEvidenceResponse| { &mut m.Evidence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetEvidenceResponse>(
            "GetEvidenceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetEvidenceResponse {
    const NAME: &'static str = "GetEvidenceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.Tee = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.Evidence = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.Tee != ::protobuf::EnumOrUnknown::new(TeeType::AzSnpVtpm) {
            my_size += ::protobuf::rt::int32_size(1, self.Tee.value());
        }
        if !self.Evidence.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.Evidence);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.Tee != ::protobuf::EnumOrUnknown::new(TeeType::AzSnpVtpm) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.Tee))?;
        }
        if !self.Evidence.is_empty() {
            os.write_bytes(2, &self.Evidence)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetEvidenceResponse {
        GetEvidenceResponse::new()
    }

    fn clear(&mut self) {
        self.Tee = ::protobuf::EnumOrUnknown::new(TeeType::AzSnpVtpm);
        self.Evidence.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetEvidenceResponse {
        static instance: GetEvidenceResponse = GetEvidenceResponse {
            Tee: ::protobuf::EnumOrUnknown::from_i32(0),
            Evidence: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetEvidenceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetEvidenceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetEvidenceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetEvidenceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:attestation_agent.GetTokenRequest)
pub struct GetTokenRequest {
    // message fields
    // @@protoc_insertion_point(field:attestation_agent.GetTokenRequest.TokenType)
    pub TokenType: ::std::string::String,
    // @@protoc_insertion_point(field:attestation_agent.GetTokenRequest.ExtraCredential)
    pub ExtraCredential: ::protobuf::MessageField<ExtraCredential>,
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.GetTokenRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTokenRequest {
    fn default() -> &'a GetTokenRequest {
        <GetTokenRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTokenRequest {
    pub fn new() -> GetTokenRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "TokenType",
            |m: &GetTokenRequest| { &m.TokenType },
            |m: &mut GetTokenRequest| { &mut m.TokenType },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ExtraCredential>(
            "ExtraCredential",
            |m: &GetTokenRequest| { &m.ExtraCredential },
            |m: &mut GetTokenRequest| { &mut m.ExtraCredential },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTokenRequest>(
            "GetTokenRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTokenRequest {
    const NAME: &'static str = "GetTokenRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.TokenType = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ExtraCredential)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.TokenType.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.TokenType);
        }
        if let Some(v) = self.ExtraCredential.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.TokenType.is_empty() {
            os.write_string(1, &self.TokenType)?;
        }
        if let Some(v) = self.ExtraCredential.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTokenRequest {
        GetTokenRequest::new()
    }

    fn clear(&mut self) {
        self.TokenType.clear();
        self.ExtraCredential.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTokenRequest {
        static instance: GetTokenRequest = GetTokenRequest {
            TokenType: ::std::string::String::new(),
            ExtraCredential: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTokenRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTokenRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTokenRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTokenRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:attestation_agent.GetTokenResponse)
pub struct GetTokenResponse {
    // message fields
    // @@protoc_insertion_point(field:attestation_agent.GetTokenResponse.Token)
    pub Token: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.GetTokenResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTokenResponse {
    fn default() -> &'a GetTokenResponse {
        <GetTokenResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTokenResponse {
    pub fn new() -> GetTokenResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Token",
            |m: &GetTokenResponse| { &m.Token },
            |m: &mut GetTokenResponse| { &mut m.Token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTokenResponse>(
            "GetTokenResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTokenResponse {
    const NAME: &'static str = "GetTokenResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Token = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.Token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Token.is_empty() {
            os.write_bytes(1, &self.Token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTokenResponse {
        GetTokenResponse::new()
    }

    fn clear(&mut self) {
        self.Token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTokenResponse {
        static instance: GetTokenResponse = GetTokenResponse {
            Token: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTokenResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTokenResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTokenResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTokenResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:attestation_agent.TeeType)
pub enum TeeType {
    // @@protoc_insertion_point(enum_value:attestation_agent.TeeType.AzSnpVtpm)
    AzSnpVtpm = 0,
    // @@protoc_insertion_point(enum_value:attestation_agent.TeeType.Sev)
    Sev = 1,
    // @@protoc_insertion_point(enum_value:attestation_agent.TeeType.Sgx)
    Sgx = 2,
    // @@protoc_insertion_point(enum_value:attestation_agent.TeeType.Snp)
    Snp = 3,
    // @@protoc_insertion_point(enum_value:attestation_agent.TeeType.Tdx)
    Tdx = 4,
    // @@protoc_insertion_point(enum_value:attestation_agent.TeeType.Cca)
    Cca = 5,
    // @@protoc_insertion_point(enum_value:attestation_agent.TeeType.Csv)
    Csv = 6,
    // @@protoc_insertion_point(enum_value:attestation_agent.TeeType.Sample)
    Sample = 7,
    // @@protoc_insertion_point(enum_value:attestation_agent.TeeType.Challenge)
    Challenge = 8,
}

impl ::protobuf::Enum for TeeType {
    const NAME: &'static str = "TeeType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TeeType> {
        match value {
            0 => ::std::option::Option::Some(TeeType::AzSnpVtpm),
            1 => ::std::option::Option::Some(TeeType::Sev),
            2 => ::std::option::Option::Some(TeeType::Sgx),
            3 => ::std::option::Option::Some(TeeType::Snp),
            4 => ::std::option::Option::Some(TeeType::Tdx),
            5 => ::std::option::Option::Some(TeeType::Cca),
            6 => ::std::option::Option::Some(TeeType::Csv),
            7 => ::std::option::Option::Some(TeeType::Sample),
            8 => ::std::option::Option::Some(TeeType::Challenge),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [TeeType] = &[
        TeeType::AzSnpVtpm,
        TeeType::Sev,
        TeeType::Sgx,
        TeeType::Snp,
        TeeType::Tdx,
        TeeType::Cca,
        TeeType::Csv,
        TeeType::Sample,
        TeeType::Challenge,
    ];
}

impl ::protobuf::EnumFull for TeeType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("TeeType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for TeeType {
    fn default() -> Self {
        TeeType::AzSnpVtpm
    }
}

impl TeeType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<TeeType>("TeeType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17attestation_agent.proto\x12\x11attestation_agent\"\xfb\x01\n\x0fEx\
    traCredential\x12.\n\x12ControllerCrpToken\x18\x01\x20\x01(\tR\x12Contro\
    llerCrpToken\x12@\n\x1bControllerAttestationReport\x18\x02\x20\x01(\tR\
    \x1bControllerAttestationReport\x120\n\x13ControllerCertChain\x18\x03\
    \x20\x01(\tR\x13ControllerCertChain\x12\x1e\n\nAAAttester\x18\x04\x20\
    \x01(\tR\nAAAttester\x12$\n\rContainerName\x18\x05\x20\x01(\tR\rContaine\
    rName\"\x84\x01\n\x12GetEvidenceRequest\x12\x20\n\x0bRuntimeData\x18\x01\
    \x20\x01(\x0cR\x0bRuntimeData\x12L\n\x0fExtraCredential\x18\x02\x20\x01(\
    \x0b2\".attestation_agent.ExtraCredentialR\x0fExtraCredential\"_\n\x13Ge\
    tEvidenceResponse\x12,\n\x03Tee\x18\x01\x20\x01(\x0e2\x1a.attestation_ag\
    ent.TeeTypeR\x03Tee\x12\x1a\n\x08Evidence\x18\x02\x20\x01(\x0cR\x08Evide\
    nce\"}\n\x0fGetTokenRequest\x12\x1c\n\tTokenType\x18\x01\x20\x01(\tR\tTo\
    kenType\x12L\n\x0fExtraCredential\x18\x02\x20\x01(\x0b2\".attestation_ag\
    ent.ExtraCredentialR\x0fExtraCredential\"(\n\x10GetTokenResponse\x12\x14\
    \n\x05Token\x18\x01\x20\x01(\x0cR\x05Token*i\n\x07TeeType\x12\r\n\tAzSnp\
    Vtpm\x10\0\x12\x07\n\x03Sev\x10\x01\x12\x07\n\x03Sgx\x10\x02\x12\x07\n\
    \x03Snp\x10\x03\x12\x07\n\x03Tdx\x10\x04\x12\x07\n\x03Cca\x10\x05\x12\
    \x07\n\x03Csv\x10\x06\x12\n\n\x06Sample\x10\x07\x12\r\n\tChallenge\x10\
    \x082\xcc\x01\n\x17AttestationAgentService\x12\\\n\x0bGetEvidence\x12%.a\
    ttestation_agent.GetEvidenceRequest\x1a&.attestation_agent.GetEvidenceRe\
    sponse\x12S\n\x08GetToken\x12\".attestation_agent.GetTokenRequest\x1a#.a\
    ttestation_agent.GetTokenResponseb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(ExtraCredential::generated_message_descriptor_data());
            messages.push(GetEvidenceRequest::generated_message_descriptor_data());
            messages.push(GetEvidenceResponse::generated_message_descriptor_data());
            messages.push(GetTokenRequest::generated_message_descriptor_data());
            messages.push(GetTokenResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(TeeType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
